#include <stdio.h>
#include <stdlib.h>


struct Process {
    int id;
    int priority;
    int burst_time;
    int remaining_time;
};


void roundRobin(struct Process processes[], int n, int quantum) {
    int time = 0;
    int remaining_processes = n;

    while (remaining_processes > 0) {
        for (int i = 0; i < n; i++) {
            if (processes[i].remaining_time > 0) {
                if (processes[i].remaining_time > quantum) {
                    time += quantum;
                    processes[i].remaining_time -= quantum;
                } else {
                    time += processes[i].remaining_time;
                    processes[i].remaining_time = 0;
                    printf("Process %d completed\n", processes[i].id);
                    printf("Total time for process %d: %d\n", processes[i].id, time);
                    remaining_processes--;
                }
            }
        }
    }
}


void priorityScheduling(struct Process processes[], int n) {
    // Sort processes by priority
    for (int i = 0; i < n; i++) {
        for (int j = i + 1; j < n; j++) {
            if (processes[i].priority > processes[j].priority) {
                // Swap processes
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }

    int time = 0;
    for (int i = 0; i < n; i++) {
        time += processes[i].burst_time;
        printf("Process %d completed\n", processes[i].id);
        printf("Total time for process %d: %d\n", processes[i].id, time);
    }
}


void firstComeFirstServe(struct Process processes[], int n) {
    int time = 0;
    for (int i = 0; i < n; i++) {
        time += processes[i].burst_time;
        printf("Process %d completed\n", processes[i].id);
        printf("Total time for process %d: %d\n", processes[i].id, time);
    }
}

int main() {
    int n, quantum;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Enter priority for Process %d: ", processes[i].id);
        scanf("%d", &processes[i].priority);
        printf("Enter burst time for Process %d: ", processes[i].id);
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }

    printf("Enter quantum time for Round Robin scheduling: ");
    scanf("%d", &quantum);

    
    struct Process highPriority[n], mediumPriority[n], lowPriority[n];
    int highCount = 0, mediumCount = 0, lowCount = 0;

    for (int i = 0; i < n; i++) {
        if (processes[i].priority >= 1 && processes[i].priority <= 3) {
            lowPriority[lowCount++] = processes[i];
        } else if (processes[i].priority >= 4 && processes[i].priority <= 6) {
            mediumPriority[mediumCount++] = processes[i];
        } else {
            highPriority[highCount++] = processes[i];
        }
    }


    printf("\nRound Robin Scheduling (Highest Priority Queue)\n");
    roundRobin(highPriority, highCount, 10);
    
    printf("\nPriority Scheduling (Medium Priority Queue)\n");
    priorityScheduling(mediumPriority, mediumCount);

    printf("\nFirst-Come-First-Serve Scheduling (Lowest Priority Queue)\n");
    firstComeFirstServe(lowPriority, lowCount);

    return 0;
}